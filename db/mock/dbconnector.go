// Code generated by MockGen. DO NOT EDIT.
// Source: db/dbconnector.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	db "github.com/ericbg27/RegistryAPI/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDBConnector is a mock of DBConnector interface.
type MockDBConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorMockRecorder
}

// MockDBConnectorMockRecorder is the mock recorder for MockDBConnector.
type MockDBConnectorMockRecorder struct {
	mock *MockDBConnector
}

// NewMockDBConnector creates a new mock instance.
func NewMockDBConnector(ctrl *gomock.Controller) *MockDBConnector {
	mock := &MockDBConnector{ctrl: ctrl}
	mock.recorder = &MockDBConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnector) EXPECT() *MockDBConnectorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDBConnector) CreateUser(userParams db.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userParams)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBConnectorMockRecorder) CreateUser(userParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBConnector)(nil).CreateUser), userParams)
}

// GetUser mocks base method.
func (m *MockDBConnector) GetUser(userName string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userName)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDBConnectorMockRecorder) GetUser(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDBConnector)(nil).GetUser), userName)
}

// GetUsers mocks base method.
func (m *MockDBConnector) GetUsers(searchParams db.GetUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", searchParams)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockDBConnectorMockRecorder) GetUsers(searchParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockDBConnector)(nil).GetUsers), searchParams)
}

// UpdateUser mocks base method.
func (m *MockDBConnector) UpdateUser(updateParams db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", updateParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBConnectorMockRecorder) UpdateUser(updateParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDBConnector)(nil).UpdateUser), updateParams)
}
